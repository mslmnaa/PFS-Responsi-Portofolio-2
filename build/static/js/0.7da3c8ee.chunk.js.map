{"version":3,"file":"static/js/0.7da3c8ee.chunk.js","mappings":"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","sources":["components/SkillsSection.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { FaPlus, FaEdit, FaTrash } from \"react-icons/fa\";\r\n\r\n// Sample skills data\r\nconst initialSkills = [\r\n  { id: 1, name: \"React\", level: 90 },\r\n  { id: 2, name: \"TypeScript\", level: 85 },\r\n  { id: 3, name: \"Node.js\", level: 80 },\r\n ];\r\n\r\nfunction SkillsSection({ isDarkMode }) {\r\n  const [skills, setSkills] = useState(initialSkills);\r\n  const [editingSkill, setEditingSkill] = useState(null);\r\n  const [newSkill, setNewSkill] = useState({ name: \"\", level: 50 });\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.1,\r\n    triggerOnce: false,\r\n  });\r\n\r\n  const containerVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: {\r\n        delayChildren: 0.3,\r\n        staggerChildren: 0.1,\r\n      },\r\n    },\r\n  };\r\n\r\n  const itemVariants = {\r\n    hidden: { y: 20, opacity: 0 },\r\n    visible: {\r\n      y: 0,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 24,\r\n      },\r\n    },\r\n  };\r\n\r\n  const addSkill = () => {\r\n    if (newSkill.name.trim() !== \"\") {\r\n      setSkills([...skills, { ...newSkill, id: Date.now() }]);\r\n      setNewSkill({ name: \"\", level: 50 });\r\n    }\r\n  };\r\n\r\n  const updateSkill = (id, updatedSkill) => {\r\n    setSkills(skills.map((skill) => (skill.id === id ? updatedSkill : skill)));\r\n    setEditingSkill(null);\r\n  };\r\n\r\n  const deleteSkill = (id) => {\r\n    setSkills(skills.filter((skill) => skill.id !== id));\r\n  };\r\n\r\n  return (\r\n    <motion.section\r\n      ref={ref}\r\n      className={`\r\n        min-h-screen w-screen flex flex-col justify-start items-center \r\n        py-8 px-4 relative overflow-hidden\r\n        ${\r\n          isDarkMode\r\n            ? \"bg-gradient-to-br from-gray-900 to-gray-800 text-white\"\r\n            : \"bg-gradient-to-br from-gray-50 to-gray-100 text-gray-900\"\r\n        }\r\n      `}\r\n      initial=\"hidden\"\r\n      animate={inView ? \"visible\" : \"hidden\"}\r\n      variants={containerVariants}\r\n    >\r\n      <motion.div\r\n        className=\"container mx-auto h-full flex flex-col px-4 sm:px-6 lg:px-8 max-w-7xl\"\r\n        variants={containerVariants}\r\n      >\r\n        <motion.h2\r\n          className=\"text-4xl font-bold mb-6 text-center\"\r\n          variants={itemVariants}\r\n        >\r\n          My <span className=\"text-blue-500\">Skills</span>\r\n        </motion.h2>\r\n\r\n        <motion.div\r\n          className=\"grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 mb-8\"\r\n          variants={containerVariants}\r\n        >\r\n          {skills.map((skill) => (\r\n            <motion.div\r\n              key={skill.id}\r\n              className={`\r\n                p-4 rounded-xl shadow-lg\r\n                ${\r\n                  isDarkMode\r\n                    ? \"bg-gray-800 border border-gray-700\"\r\n                    : \"bg-white border border-gray-200\"\r\n                }\r\n              `}\r\n              variants={itemVariants}\r\n            >\r\n              {editingSkill === skill.id ? (\r\n                <form\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    updateSkill(skill.id, {\r\n                      ...skill,\r\n                      name: e.target.name.value,\r\n                      level: parseInt(e.target.level.value),\r\n                    });\r\n                  }}\r\n                  className=\"flex flex-col gap-2 sm:flex-row sm:items-end\"\r\n                >\r\n                  <div className=\"flex-1\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      defaultValue={skill.name}\r\n                      className={`p-2 rounded-md w-full ${\r\n                        isDarkMode\r\n                          ? \"bg-gray-700 text-white\"\r\n                          : \"bg-gray-100 text-gray-900\"\r\n                      }`}\r\n                    />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <input\r\n                      type=\"range\"\r\n                      name=\"level\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      defaultValue={skill.level}\r\n                      className=\"w-full\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"flex justify-end gap-2 mt-2 sm:mt-0\">\r\n                    <motion.button\r\n                      type=\"submit\"\r\n                      className=\"px-3 py-1 bg-green-500 text-white rounded-md\"\r\n                      whileHover={{ scale: 1.05 }}\r\n                      whileTap={{ scale: 0.95 }}\r\n                    >\r\n                      Save\r\n                    </motion.button>\r\n                    <motion.button\r\n                      type=\"button\"\r\n                      onClick={() => setEditingSkill(null)}\r\n                      className=\"px-3 py-1 bg-gray-500 text-white rounded-md\"\r\n                      whileHover={{ scale: 1.05 }}\r\n                      whileTap={{ scale: 0.95 }}\r\n                    >\r\n                      Cancel\r\n                    </motion.button>\r\n                  </div>\r\n                </form>\r\n              ) : (\r\n                <>\r\n                  <h3 className=\"text-lg font-semibold mb-2\">{skill.name}</h3>\r\n                  <div className=\"relative pt-1\">\r\n                    <div className=\"flex mb-2 items-center justify-between\">\r\n                      <div>\r\n                        <span\r\n                          className={`text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full ${\r\n                            isDarkMode\r\n                              ? \"text-blue-200 bg-blue-900\"\r\n                              : \"text-blue-600 bg-blue-200\"\r\n                          }`}\r\n                        >\r\n                          {skill.level}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className={`overflow-hidden h-2 mb-4 text-xs flex rounded ${\r\n                        isDarkMode ? \"bg-blue-900\" : \"bg-blue-200\"\r\n                      }`}\r\n                    >\r\n                      <div\r\n                        style={{ width: `${skill.level}%` }}\r\n                        className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500\"\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex justify-end gap-2 mt-2\">\r\n                    <motion.button\r\n                      onClick={() => setEditingSkill(skill.id)}\r\n                      className={`p-2 rounded-full ${\r\n                        isDarkMode ? \"bg-gray-700\" : \"bg-gray-200\"\r\n                      }`}\r\n                      whileHover={{ scale: 1.1 }}\r\n                      whileTap={{ scale: 0.9 }}\r\n                    >\r\n                      <FaEdit className=\"text-blue-500\" />\r\n                    </motion.button>\r\n                    <motion.button\r\n                      onClick={() => deleteSkill(skill.id)}\r\n                      className={`p-2 rounded-full ${\r\n                        isDarkMode ? \"bg-gray-700\" : \"bg-gray-200\"\r\n                      }`}\r\n                      whileHover={{ scale: 1.1 }}\r\n                      whileTap={{ scale: 0.9 }}\r\n                    >\r\n                      <FaTrash className=\"text-red-500\" />\r\n                    </motion.button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </motion.div>\r\n          ))}\r\n        </motion.div>\r\n\r\n        <motion.div\r\n          className={`p-4 rounded-xl shadow-lg ${\r\n            isDarkMode\r\n              ? \"bg-gray-800 border border-gray-700\"\r\n              : \"bg-white border border-gray-200\"\r\n          }`}\r\n          variants={itemVariants}\r\n        >\r\n          <h3 className=\"text-lg font-semibold mb-4\">Add New Skill</h3>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              addSkill();\r\n            }}\r\n            className=\"flex flex-col gap-4 sm:flex-row sm:items-end\"\r\n          >\r\n            <div className=\"flex-1\">\r\n              <input\r\n                type=\"text\"\r\n                value={newSkill.name}\r\n                onChange={(e) => setNewSkill({ ...newSkill, name: e.target.value })}\r\n                placeholder=\"Skill name\"\r\n                className={`p-2 rounded-md w-full ${\r\n                  isDarkMode\r\n                    ? \"bg-gray-700 text-white\"\r\n                    : \"bg-gray-100 text-gray-900\"\r\n                }`}\r\n              />\r\n            </div>\r\n            <div className=\"flex-1\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <input\r\n                  type=\"range\"\r\n                  value={newSkill.level}\r\n                  onChange={(e) =>\r\n                    setNewSkill({ ...newSkill, level: parseInt(e.target.value) })\r\n                  }\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  className=\"w-full\"\r\n                />\r\n                <span\r\n                  className={`text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full ${\r\n                    isDarkMode\r\n                      ? \"text-blue-200 bg-blue-900\"\r\n                      : \"text-blue-600 bg-blue-200\"\r\n                  }`}\r\n                >\r\n                  {newSkill.level}%\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <motion.button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-500 text-white rounded-md flex items-center justify-center gap-2 w-full sm:w-auto\"\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n            >\r\n              <FaPlus />\r\n              Add Skill\r\n            </motion.button>\r\n          </form>\r\n        </motion.div>\r\n      </motion.div>\r\n    </motion.section>\r\n  );\r\n}\r\n\r\nexport default SkillsSection;\r\n\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["initialSkills","id","name","level","_ref","isDarkMode","skills","setSkills","useState","editingSkill","setEditingSkill","newSkill","setNewSkill","ref","inView","useInView","threshold","triggerOnce","containerVariants","hidden","opacity","visible","transition","delayChildren","staggerChildren","itemVariants","y","type","stiffness","damping","_jsx","motion","section","className","initial","animate","variants","children","_jsxs","div","h2","map","skill","onSubmit","e","updateSkill","updatedSkill","preventDefault","target","value","parseInt","defaultValue","min","max","button","whileHover","scale","whileTap","onClick","_Fragment","style","width","FaEdit","deleteSkill","filter","FaTrash","trim","Date","now","onChange","placeholder","FaPlus","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}